#!/usr/bin/env node

/*
Copyright (c) 2013, Yahoo! Inc. All rights reserved.
Code licensed under the BSD License:
http://yuilibrary.com/license/
*/

const args = require('../lib/args');
const exitProcessOrWarnIfNeeded = require('../lib/exitProcessOrWarnIfNeeded');
const fs = require('fs');
const helpers = require('../lib/licenseCheckerHelpers');
const licenseCheckerMain = require('../lib/index');
const mkdirp = require('mkdirp');
const path = require('path');

const parsedArgs = args.parse();
const hasFailingArg = parsedArgs.failOn || parsedArgs.onlyAllow;
const kownOptions = Object.keys(args.knownOptions);
const unknownArgs = Object.keys(parsedArgs).filter((arg) => !kownOptions.includes(arg));

exitProcessOrWarnIfNeeded({ unknownArgs, parsedArgs, hasFailingArg });

licenseCheckerMain.init(parsedArgs, function (err, foundLicensesJson) {
    if (err) {
        console.error('An error has occurred:');
        console.error(err);
    }

    if (helpers.shouldColorizeOutput(parsedArgs)) {
        helpers.colorizeOutput(foundLicensesJson);
    }

    const formattedOutput = helpers.getFormattedOutput(foundLicensesJson, parsedArgs);

    if (parsedArgs.files || parsedArgs.out) {
        if (parsedArgs.files) {
            licenseCheckerMain.asFiles(foundLicensesJson, parsedArgs.files);
        }

        if (parsedArgs.out) {
            const dir = path.dirname(parsedArgs.out);

            mkdirp.sync(dir);
            fs.writeFileSync(parsedArgs.out, formattedOutput, 'utf8');
        }
    }

    if (!parsedArgs.out) {
        console.log(formattedOutput);
    }
});
